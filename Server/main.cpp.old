#include "ace/Service_Config.h"
#include "ace/Logging_Strategy.h"
#include "ace/Sig_Adapter.h"

#include "Server_Logging_Handler.h"

int
ACE_TMAIN (int argc, ACE_TCHAR *argv[])
{

  // Try to link in the svc.conf entries dynamically, enabling the
  // "ignore_debug_flag" as the last parameter so that we can override
  // the default ACE_Log_Priority settings in the svc.conf file.
  //
  // Warning - do not try to move the ACE_Reactor signal handling work
  // up to before this call - if the user specified -b (be a daemon),
  // all handles will be closed, including the Reactor's pipe.

	if (ACE_Service_Config::open (argc, argv, ACE_DEFAULT_LOGGER_KEY, 1, 0, 1) == -1)
	{
		if (errno != ENOENT)
			ACE_ERROR_RETURN ((LM_ERROR,
                           ACE_TEXT ("%p\n"),
                           ACE_TEXT ("open")),
                          1);
	else // Use static linking.
	{
		ACE_DEBUG ((LM_DEBUG,"Static Linking!!!!!!!!\n"));

		if (ACE::debug () == 0) ACE_LOG_MSG->priority_mask (~LM_DEBUG, ACE_Log_Msg::PROCESS);

		// Calling ACE_SVC_INVOKE to create a new Service_Object
		// Stash the newly created Service_Object into an
		// ACE_Service_Object_Ptr which is an <auto_ptr> specialized
		// for ACE_Service_Object.

		ACE_TCHAR *l_argv[3];
#if 0
		//----------------
		l_argv[0] = ACE_TEXT ("-p ") ACE_TEXT (ACE_DEFAULT_THR_LOGGING_SERVER_PORT_STR);
		l_argv[1] = 0;

		ACE_Service_Object_Ptr sp_5 = ACE_SVC_INVOKE (ACE_Thr_Server_Logging_Acceptor);
		if (sp_5->init (1, l_argv) == -1) ACE_ERROR_RETURN ((LM_ERROR, "%p\n", "Threaded Logging Server"), 1);
#endif
#if 0
		//---------------
		l_argv[0] = ACE_TEXT ("-p ") ACE_TEXT (ACE_DEFAULT_LOGGING_SERVER_PORT_STR);
		l_argv[1] = 0;

		ACE_Service_Object_Ptr sp_6 = ACE_SVC_INVOKE (ACE_Server_Logging_Acceptor);
		if (sp_6->init (1, l_argv) == -1) ACE_ERROR_RETURN ((LM_ERROR, "%p\n", "Logging Server"), 1);
#endif


		//-----------------
		// Run forever, performing the configured services until we are shut down by a SIGINT/SIGQUIT signal.
		ACE_Sig_Adapter sa ((ACE_Sig_Handler_Ex) ACE_Reactor::end_event_loop);
		ACE_Sig_Set sig_set;
		sig_set.sig_add (SIGINT);
		sig_set.sig_add (SIGQUIT);
		if (ACE_Reactor::instance ()->register_handler (sig_set, &sa) == -1)
			ACE_ERROR ((LM_ERROR,"%p\n","register signals"));
		else
			ACE_Reactor::instance ()->run_reactor_event_loop ();
		}
	}
	else // Use dynamic linking.
	{
		ACE_DEBUG ((LM_DEBUG,"Static Linking!!!!!!!!\n"));

		ACE_Sig_Adapter sa ((ACE_Sig_Handler_Ex) ACE_Reactor::end_event_loop);
		ACE_Sig_Set sig_set;
		sig_set.sig_add (SIGINT);
		sig_set.sig_add (SIGQUIT);
		if (ACE_Reactor::instance ()->register_handler (sig_set, &sa) == -1)
			ACE_ERROR ((LM_ERROR, "%p\n", "register signals2"));
		else
			ACE_Reactor::instance ()->run_reactor_event_loop ();
	}
	return 0;
}
