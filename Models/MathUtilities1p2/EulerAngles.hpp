////////////////////////////////////////////////////////////////////////////////
//
// Filename:         EulerAngles.hpp
//
// Classification:   UNCLASSIFIED
//
// Unit Name:        Utilities
//
// System Name:      Simulation
//
// Description:      This file contains the class definition of EulerAngles.
//
// Author:           Hector Bayona
//                   Nancy Anderson
//
// Company Name:     Lockheed Martin
//                   Missiles & Fire Control
//                   Dallas, TX
//
// Revision History:
//
// <yyyymmdd> <Eng> <Desciption of modification>
//  20051114   HLB   Originial Release
//
////////////////////////////////////////////////////////////////////////////////

#ifndef _EULERANGLES_HPP
#define _EULERANGLES_HPP

#include "ISEExport.h"
#include "Vec3.hpp"

namespace SamsonMath {

class ISE_Export EulerAngles : public Vec3<double>
{
   public:

////////////////////////////////////////////////////////////////////////////////
// Procedure:    EulerAngles
///Description:  The constructor for the class EulerAngles that also gives inital
///              values for the arguments.
// Inputs:       aRoll
//               aPitch
//               aYaw
// Outputs:      None
////////////////////////////////////////////////////////////////////////////////

   EulerAngles (const double aRoll = 0.0, const double aPitch = 0, const double aYaw = 0.0);

////////////////////////////////////////////////////////////////////////////////
// Procedure:    EulerAngles
///Description:  The copy constructor for the class EulerAngles.
// Inputs:       aVec
// Outputs:      None
////////////////////////////////////////////////////////////////////////////////

   EulerAngles (const Vec3<double> & aVec);


////////////////////////////////////////////////////////////////////////////////
//  Procedure:    getRoll
/// Description:  This function gets the Roll argument.
////////////////////////////////////////////////////////////////////////////////

   inline double getRoll (void) const;

////////////////////////////////////////////////////////////////////////////////
//  Procedure:    setRoll
/// Description:  This function sets the Roll argument.
//  Inputs:       aRoll
//  Output:       none
////////////////////////////////////////////////////////////////////////////////

   inline void setRoll (const double aRoll);

////////////////////////////////////////////////////////////////////////////////
// Procedure:     getPitch
/// Description:  This function gets the Pitch argument.
////////////////////////////////////////////////////////////////////////////////

   inline double getPitch (void) const;

////////////////////////////////////////////////////////////////////////////////
// Procedure:     setPitch
/// Description:  This function sets the Pitch argument.
// Inputs:        aPitch
// Output:        none
////////////////////////////////////////////////////////////////////////////////

   inline void setPitch (const double aPitch);

////////////////////////////////////////////////////////////////////////////////
// Procedure:     getYaw
/// Description:  This function gets the Yaw argument.
//  Returns:      double (Yaw)
////////////////////////////////////////////////////////////////////////////////

   inline double getYaw (void) const;

////////////////////////////////////////////////////////////////////////////////
// Procedure:     setYaw
/// Description:  This function sets the Yaw argument.
// Inputs:        aYaw
// Output:        none
////////////////////////////////////////////////////////////////////////////////

   inline void setYaw (const double aYaw);

////////////////////////////////////////////////////////////////////////////////
// Procedure:     ~EulerAngles
/// Description:  This is the destructor of the class.
////////////////////////////////////////////////////////////////////////////////

   ~EulerAngles ();

   ////////////////////////////////////////////////////////////////////////////////
   // Procedure:    <<
   // Description:  Overloaded I/O Operators
   // Inputs:       ostream, EulerAngle
   // Output:       ostream
   ////////////////////////////////////////////////////////////////////////////////
 
   ISE_Export friend std::ostream& operator<<(ostream& output, const EulerAngles& p);
};


}; // namespace

#include "EulerAngles.ipp"
#endif


