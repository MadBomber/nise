#include "BaseMsg.h"

/*
#ifdef _DEBUG
	#undef THIS_FILE
	static char BASED_CODE THIS_FILE[] = __FILE__;
#endif
*/


/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////
// CBaseMsg
/////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////////
// CBaseMsg construction/destruction
/////////////////////////////////////////////////////////////////////////////
CBaseMsg::CBaseMsg() :
m_iMsgID(0),
m_sMsgType(SM_Null),
Key("BM"),
Description("BaseMessage")
{
}

/////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////
CBaseMsg::CBaseMsg(SMessageType aMsgType, std::string aKey, std::string aDescr) :
m_iMsgID(0),
m_sMsgType(aMsgType),
Key(aKey),
Description(aDescr)
{
}

/////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////
CBaseMsg::~CBaseMsg()
{
}

/////////////////////////////////////////////////////////////////////////////
// Sets a unique identifier to each message.
/////////////////////////////////////////////////////////////////////////////
void CBaseMsg::SetMsgID(int iMsgID)
{
	m_iMsgID = iMsgID;
}

/////////////////////////////////////////////////////////////////////////////
// Gets the identifier of this message.
/////////////////////////////////////////////////////////////////////////////
int CBaseMsg::GetMsgID() const
{
	return m_iMsgID;
}

/////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////
void CBaseMsg::SetMessageType(SMessageType sMsgType)
{
	m_sMsgType=sMsgType;
}

/////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////
SMessageType CBaseMsg::GetMessageType() const
{
	return m_sMsgType;
}

/////////////////////////////////////////////////////////////////////////////
// CBaseMsg serialization
/////////////////////////////////////////////////////////////////////////////
//void CBaseMsg::Serialize(CArchive& ar)
//{
//	if (ar.IsStoring())
//	{
//		ar << m_iMsgID;
//		ar << m_sMsgType;
//		ar << m_sKey;
//		ar << m_sDescription;
//	}
//	else
//	{
//		ar >> m_iMsgID;
//		int iTmp;
//		ar >> iTmp;
//		m_sMsgType=(SMessageType)iTmp;
//		ar >> m_sKey;
//		ar >> m_sDescription;
//	}
//}

/////////////////////////////////////////////////////////////////////////////
//
/////////////////////////////////////////////////////////////////////////////
void CBaseMsg::Copy(const CBaseMsg& msg)
{
	m_iMsgID=msg.m_iMsgID;
	m_sMsgType=msg.m_sMsgType;
	Key = msg.Key;
	Description = msg.Description;
}

/////////////////////////////////////////////////////////////////////////////
//		Assignment (overloaded operator =)
/////////////////////////////////////////////////////////////////////////////
CBaseMsg& CBaseMsg::operator=(const CBaseMsg& msg)
{
	m_iMsgID=msg.m_iMsgID;
	m_sMsgType=msg.m_sMsgType;
	Key = msg.Key;
	Description = msg.Description;
	return *this ;
}

