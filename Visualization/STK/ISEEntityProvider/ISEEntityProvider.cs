//=============================================================================
//=                 Copyright 2006, Analytical Graphics, Inc.                 =
//=============================================================================

using System;
using System.Runtime.InteropServices;
using System.Windows.Forms;
using Coord;
using System.IO;

namespace ISEEntityProvider
{
    /// <summary>
    /// 'This class library serves as a reference implementation of a Real-Time
    /// Framework Entity Provider Plug-in written in C#.  It assumes you have a
    /// basic understanding of C# as well as Microsoft's Component Object Model
    /// In order to use this plug-in, you must first compile it and then
    /// register it by importing ISEEntityProvider.reg into your 
    /// registry.  Please see rt3devkit.chm for more information.
    /// This plug-in was generated by creating a new project and using the class
    /// wizard to generate a new class.  You should do the same for any new
    /// plug-ins you wish to create.  For Entity Provider plug-ins, the only
    /// reference you need to add is "AGI Real-Time Framework 8"
    /// 
    /// This Provider plug-in reads a simple data format defined in detail in the
    /// ThreadFunction method.  A Sample data file, ReferenceProviderData.txt. is
    /// provided in the Referece\Data directory.
    /// </summary>

    public delegate void OnProviderStartDelegate(AGI.Realtime.IAgRtProvideEntities Sender);
    public delegate void OnProviderStopDelegate(AGI.Realtime.IAgRtProvideEntities Sender);

    //If you are implementing the IAgAttrConfig interface, then you need to
    //define an IDispatch compatible interface for your class to expose.  This
    //interface should have all properties exposed via IAgAttrConfig.
    [Guid("1BF2C64D-108E-47df-AC03-DD1B2CC48641")]
    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
    public interface IISEEntityProvider
    {
        System.DateTime StartDateTime
        {
            get;
            set;
        }

        [System.Runtime.InteropServices.DispId((int) AGI.Realtime.AgERtEventDispatchID.eProviderStartEvent)] event OnProviderStartDelegate OnProviderStart;
        [System.Runtime.InteropServices.DispId((int) AGI.Realtime.AgERtEventDispatchID.eProviderStopEvent)] event OnProviderStopDelegate OnProviderStop;
    }

    [Guid(ISEEntityProvider.ClassId),
    ProgId(ISEEntityProvider.ProgID),
    ClassInterface(ClassInterfaceType.None),
    ComSourceInterfaces(typeof(AGI.Realtime.IAgRtProvideEntitiesEvents))]
    public class ISEEntityProvider:
        //Our IDispatch interface (must be first)
        IISEEntityProvider,

        //IAgRtPluginis the base interface for all Real-Time Framework plug-ins
        AGI.Realtime.IAgRtPlugin,
        
        //IAgRtProvideEntities is the main interface for an entity provider plug-in
        AGI.Realtime.IAgRtProvideEntities,

        //IAgAttrConfig allows a plug-in to provider user configurable options
        //that can be modified via the GUI in all AGI products which integrate
        //Real-Time Framework Capability.  If you are writing a custom 4DX
        //application and do not wish to use your entity provider in 
        //standard AGI applications such as Rtc, Viewer, STK and GDE, then you are
        //not required to to implement this interface.
        AGI.Attr.IAgAttrConfig,

        //Implementing IAgRtUseStream allows a plug-in to be data source agnostic.
        //This means it will not care where the data is coming from, whether that
        //be a file on disk or a network stream.  Instead, it relies on the provided
        //stream object for access to its data.  The stream plug-in is created
        //and configured independantly of the entity provider plug-in.  If you do
        //not need or want this flexibility, you do not have to implement
        //IAgRtUseStream
        AGI.Realtime.IAgRtUseStream
    {
        #region Variables, Constants, Events & Delegates
        
        //Constants
        public const string ClassId = "1FDDE7A5-D5A8-4d33-8EE9-17E4E9695C7D";
        public const string ProgID = "ISEEntityProvider.ISEEntityProvider";
        private const string _sTypeName = "ISEEntityProvider";

        //Variables
        private bool _bActive = false;
        private string _sName;
        private string _sID;
        private AGI.Entity.AgEntityCollection _Entities = null;
        private object _Options = null;
        private System.Threading.Thread _ThreadControl = null;
        private AGI.Realtime.IAgRtStream _Stream = null;
        private double _TimeDelay = 100;
        private System.DateTime _StartDateTime = new DateTime(2008, 5, 1, 12, 0, 0);
        
        
        #endregion

        #region ISEEntityProvider Methods
    //ThreadFunction is where all of the actual substance happens.
    //Using the Stream object, we read a line of data and parse
    //it for the entity ID, Position and our meta-data.
    //This data is in a simple format laid out as follows.
    //Each line is 80 characters plus linefeed and carriage return
    //Each token is seperated by a single whitespace with the order being
    //NAME LAT LON ALT AFFILIATION MIL2525B
    //ReferenceProviderData.txt in the Referece\Data directory contains
    //sample data which can be used to run the plug-in
    public void ThreadFunction()
    {
        
        string results, results1, results2, results3;

        try
        {
            if (OnProviderStart != null)
            {
                OnProviderStart(this);
            }

            _Stream.Open();

            results = "";
            //results1 = "";
            //results2 = "";
            //results3 = "";

            while(this._bActive)
            {
                try
                {
                    //Read a Message
                    String row_text = _Stream.Read(1000) as String;
                    string EntityName;
                    double Latitude=0.0;
                    double Longitude=0.0;
                    double Altitude=0.0;
                    
                    double North, East, Down;
                    double lat0 = 51.50117;
                    double lon0 = -0.14246;
                    LCS lcs = new LCS(lat0 * Math.PI / 180.0, lon0 * Math.PI / 180.0);

                    System.TimeSpan EntityTimeElapsed;

                    bool NewEntity;
                    AGI.Entity.IAgEntity Entity;
                    AGI.Entity.IAgPointEntity PointEntity;
                    String[] elements;

                    //MessageBox.Show(row_text);

                    String[] rows = row_text.Split('\n');

                    foreach (String row in rows)
                    {
                        elements = row.Split(' ');

                        if (elements.Length >= 5)
                        {
                            EntityName = elements[1];
                            North = Convert.ToDouble(elements[2]);
                            East = Convert.ToDouble(elements[3]);
                            Down = Convert.ToDouble(elements[4]);
                            EntityTimeElapsed = new TimeSpan(Convert.ToInt64(Convert.ToDouble(elements[0]) * 10000000));

                            lcs.to_lle(North, East, -1.0 * Down, ref Latitude, ref Longitude, ref Altitude);
                            Latitude *= 180.0 / Math.PI;
                            Longitude *= 180.0 / Math.PI;

                            

                            //Now we'll see if the entity has already been
                            //inserted into the system.  If it has, we simply
                            //update it and call CommitUpdate, if it hasn't
                            //we need to call Add
                            NewEntity = false;

                            try
                            {

                                Entity = Entities.Find(EntityName);
                                PointEntity = Entity as AGI.Entity.IAgPointEntity;
                                
                            }
                            catch
                            {

                                PointEntity = new AGI.Entity.AgPointEntity() as AGI.Entity.IAgPointEntity;
                                Entity = PointEntity as AGI.Entity.IAgEntity;
                                Entity.ID = EntityName;
                                //Entity.MetaData.SetMetaData("AGI.Stk.ObjectTemplate", "C:\\Test\\Aircraft1.ac");
                                PointEntity.Position = new AGI.Entity.AgEntityPosition() as AGI.Entity.IAgEntityPosition;
                                NewEntity = true;
                            }

                            //Our data does not have time so we always assume the
                            //position time is Now
                            //Entity.Time = DateTime.Now.ToUniversalTime();
                            Entity.Time = _StartDateTime.Add(EntityTimeElapsed);

                            //results = "Time " + Entity.Time.ToShortDateString() + " " + Entity.Time.ToLongTimeString() + " ms " + Entity.Time.Millisecond + " La " + Latitude + " Lo " + Longitude + " Alt " + Altitude + "\n";

                            //Set the position
                            if (Altitude > 0.0)
                                PointEntity.Position.Altitude = Altitude;
                            else
                                PointEntity.Position.Altitude = 1;

                            PointEntity.Position.Latitude = Latitude;
                            PointEntity.Position.Longitude = Longitude;

                            //Call add or update
                            if (NewEntity)
                            {
                                Entities.Add(Entity);
                            }
                            else
                            {
                                PointEntity.CommitUpdate(AGI.Entity.AgEEntityUpdate.eEntityUpdate);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    //MessageBox.Show("Caught Inner Try: " + ex.Message + "|" + ex.Source);
                }

                //Sleep the desired wait time
                System.Threading.Thread.Sleep((int)(_TimeDelay));
                //MessageBox.Show(results);
                //_SW.Write(results);
                
            }

            _Stream.Close();
            
            

            if (OnProviderStop != null)
            {
                OnProviderStop(this);
            }
        }
        catch(System.Runtime.InteropServices.COMException ex)
        {
            MessageBox.Show("Caught Outer Try");
            this._bActive = false;
            _ThreadControl = null;
            
            if(OnProviderStop != null)
            {
                OnProviderStop(this);
            }
            System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(ex.ErrorCode);
        }
    }
        #endregion

        #region IAgRtPlugin Implementation
        //This region contains all implementation code for methods in the
        //IAgRtPlugin interface.  See each method individually for detailed
        //information regarding its implementation

        public string Name
        {
            //Name is a unique type-name for this plug-in.  It must be the same across
            //all instances of the plug-in.
            get
            {
                return _sTypeName;
            }
        }
        #endregion

        #region IAgRtProvideEntities Implementation
        //This region contains all implementation code for methods in the
        //IAgRtProvideEntities interface.  See each method individually for
        //detailed information regarding its implementation

        //ID is a globally unique identifier associated with one instance of the
        //provider.  It is assigned by the application during registration.
        public string ID
        {
            get
            {
                return this._sID;
            }
            set
            {
                _sID = value;
            }
        }
        
        //Active is a read-only property that simply returns a boolean indicating if
        //the plug-in is currently started or not.  We set _bActive when the plug-in
        //is started or stopped.
        public bool Active
        {
            get
            {
                return this._bActive;
            }
        }

        //The MetaDataNames property returns an Array of strings which match the
        //available meta-data from each of the entities that the provider creates.
        //This is used by the Rt3 Ui for displaying available meta-data.  In this
        //example, we use 2 fields, Affiliation and Mil2525B Symbology.  Default
        //fields, such as Latitude and Longitude, are always present in the meta-
        //data, regardless of them being listed here.
        public System.Array MetaDataNames
        {
            get
            {
                System.Collections.ArrayList Values = new System.Collections.ArrayList();
                Values.Add("Affiliation");
                Values.Add("Mil2525B");
                return Values.ToArray();
            }
        }

        //The MetaDataDictionary property returns an Array of AgRtDataDictionaryEntry
        //object available meta-data from each of the entities that the provider creates.
        //This is used by the Rt3 Ui for displaying available meta-data.  In this
        //example, we use 2 fields, Affiliation and Mil2525B Symbology.
        public System.Array MetaDataDictionary
        {
            get
            {
                System.Collections.ArrayList Values = new System.Collections.ArrayList();

                AGI.Realtime.AgRtDataDictionaryEntry Entry = new AGI.Realtime.AgRtDataDictionaryEntry();
                Entry.Name = "Affiliation";
                Entry.Sample = "FRI";
                Values.Add(Entry);

                Entry = new AGI.Realtime.AgRtDataDictionaryEntry();
                Entry.Name = "Symbology";
                Entry.Sample = "SFAPMF----*****";
                Values.Add(Entry);

                return Values.ToArray();
            }
        }

        
        //The Entities property is a collection object which allows the plug-in to
        //insert and remove entities from the framework.  If the plug-in is
        //registered with Rt3, Entities is an instance of AgRt3EntityManager.  If
        //registered with Rtc, Entities is AgRtcEntityManager.  In either case, this
        //property is set by the application object when the instance of the plug-in
        //is registered with the application.
        public AGI.Entity.AgEntityCollection Entities
        {
            get
            {
                return this._Entities;
            }
            set
            {
                this._Entities = value;
            }
        }

        //In any given application, it is possible to have multiple instances of a
        //plug-in.  In this case, InstanceName is the user-defined name for this
        //particular instance.
        public string InstanceName
        {
            get
            {
                return this._sName;
            }
            set
            {
                this._sName = value;
            }
        }

        //Start creates our processing thread.  Other options could be registering
        //for a callback or some other data processing functionality
        //A thread is simple and elegant solution to what we're doing.
        //It is very important that start returns after initialization, it cannot
        //look forever.
        public void Start()
        {
            if(!this._bActive)
            {
                Validate();

                this._ThreadControl = 
                        new System.Threading.Thread(new System.Threading.ThreadStart(this.ThreadFunction));

                this._ThreadControl.ApartmentState =
                                        System.Threading.ApartmentState.MTA;
                this._bActive = true;
                this._ThreadControl.Start();
            }
        }

        //Stop simply terminates our thread and returns
        public void Stop()
        {
            if(this._bActive)
            {
                this._bActive = false;
                _ThreadControl.Join();
                _ThreadControl = null;
            }
        }

        //Validate's job is to check our parameters to make sure we are configured
        //and can successfully process data.  It should use ThrowExceptionForHR
        //to return any errors in the configuration and simply return if
        //everything is okay.
        public void Validate()
        {
            if(_TimeDelay < 0 || _Stream == null || _Entities == null)
            {
                System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(unchecked((int)0x80004005)); //E_FAIL
            }
            else
            {
                try
                {
                    _Stream.Validate();
                }
                catch(System.Runtime.InteropServices.COMException ex)
                {
                    System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(ex.ErrorCode);
                }
            }
        }
        #endregion

        #region IAgRtProvideEntitiesEvents Implementation
        //Since Providers must rause events defined in IAgRtProvideEntitiesEvents,
        //we must define the events, with the proper DispId here
        //This block of code can be copied, unchanged, into your provider plug-in.
        
        [System.Runtime.InteropServices.DispId((int) AGI.Realtime.AgERtEventDispatchID.eProviderStartEvent)] public event OnProviderStartDelegate OnProviderStart;
        [System.Runtime.InteropServices.DispId((int) AGI.Realtime.AgERtEventDispatchID.eProviderStopEvent)] public event OnProviderStopDelegate OnProviderStop;
        #endregion

        #region IAgAttrConfig Implementation

        public object GetConfig(AGI.Attr.AgAttrBuilder AttrBuilder)
        {
          if(this._Options == null)
            {
                this._Options = AttrBuilder.NewScope();

                //Expose a string option for the email address
              /*  AttrBuilder.AddDateDispatchProperty(this._Options, 
                    "Start Date", 
                    "Time to Start the Simulation", 
                    "StartDateTime", 
                    (int) AGI.Attr.AgEAttrAddFlags.eAddFlagNone);*/
            }
            
            return this._Options;

            //return null;
        }

        #endregion

        #region IAgRtUseStream Implementation
        //This region contains all implementation code for methods in the
        //IAgRtUseStream interface.  This interface only contains one property,
        //the stream object which the entity provider should use.
        public AGI.Realtime.IAgRtStream Stream
        {
            get
            {
                return _Stream;
            }
            set
            {
                _Stream  = value;
            }
        }
        #endregion

        #region IISEEntityProvider Implementation
        //Our simple property which sets the delay between position updates.
        public System.DateTime StartDateTime
        {
            get
            {
                return this._StartDateTime;
            }
            set
            {
                this._StartDateTime = value;
                MessageBox.Show(_StartDateTime.ToLongTimeString());
            }
        }
        #endregion    
    }
}

//=============================================================================
//=                 Copyright 2006, Analytical Graphics, Inc.                 =
//=============================================================================
