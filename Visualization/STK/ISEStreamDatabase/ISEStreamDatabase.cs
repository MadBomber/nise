//=============================================================================
//=                 Copyright 2006, Analytical Graphics, Inc.                 =
//=============================================================================

using System;
using System.Runtime.InteropServices;
using MySql.Data.MySqlClient;
using System.Windows.Forms;

namespace ISEStreamDatabase
{
	/// <summary>
    ///This class library serves as a reference implementation of a Real-Time
    ///Tracking Tool Query Plug-in written in C#.  It assumes that you have a
    ///basic understanding of C# as well as Microsoft's Component Object Model.
    ///In order to use this plug-in, you must first compile it and then
    ///register it by importing CSharpReferenceStream.reg into your registry.
    ///Please see rt3devkit.chm for more information.
    ///
    ///This plug-in was generated by creating a new project and using the class
    ///wizard to generate a new Class.  You should do the same for any new
    ///plug-ins you wish to create.  For Stream  plug-ins, the only reference
    ///you need to add is "AGI Real-Time Framework 8"
    ///
    ///This Stream plug-in reads a file on disk.
    /// </summary>

    //If you are implementing the IAgAttrConfig interface, then you need to
    //define an IDispatch compatible interface for your class to expose.  This
    //interface should have all properties exposed via IAgAttrConfig.
    [Guid("8627236B-1355-46bd-892A-FDB0A0F56230")]
    [InterfaceType(ComInterfaceType.InterfaceIsDual)]
    public interface IISEStreamDatabase
    {
        string Database
        {
                get;
                set;
        }

        string Table
        {
            get;
            set;

        }
    }
    
    [Guid(ISEStreamDatabase.ClassId),
    ProgId(ISEStreamDatabase.ProgID),
    ClassInterface(ClassInterfaceType.None)]
    public class ISEStreamDatabase:
        //Our IDispatch interface (must be first)
        IISEStreamDatabase,

        //IAgRtPluginis the base interface for all Real-Time Framework plug-ins
        AGI.Realtime.IAgRtPlugin,

        //IAgRtStream is the main interface for a Stream plug-in
        AGI.Realtime.IAgRtStream,
        
        //IAgAttrConfig allows a plug-in to provider user configurable options
        //that can be modified via the GUI in all AGI products which integrate
        //Real-Time Framework Capability.  If you are writing a custom 4DX
        //application and do not wish to use your entity provider in 
        //standard AGI applications such as Rtc, Viewer, STK and GDE, then you are
        //not required to to implement this interface.
        AGI.Attr.IAgAttrConfig
    {
        #region Variables, Constants, Events & Delegates
        //Constants
        public const string ClassId = "19822D5A-7FCE-4837-893F-FDE72B9B81D1";
        public const string ProgID = "ISEStreamDatabase.ISEStreamDatabase";
        private const string _sTypeName = "ISEStreamDatabase";
        private const string _Server = "138.209.52.147";
        private const string _UID = "Samson";
        private MySqlConnection _Conn = null;
        
        
        private object _Options = null;
        private string _sDatabase;
        private string _sTable;
        
        private MySqlCommand _Command = null;
        private string _sInstanceName = "ISEStreamDatabase";

        #endregion

        #region IAgRtPlugin Implementation
        //This region contains all implementation code for methods in the
        //IAgRtPlugin interface.  See each method individually for detailed
        //information regarding its implementation

        public string Name
        {
            get
            {
                return _sTypeName;
            }
        }        

        public string InstanceName
        {
            //In any given application, it is possible to have multiple instances of
            //a plug-in.  In this case, InstanceName is the user-defined name for
            //this particular instance.
            get
            {
                return this._sInstanceName;
            }
            set
            {
                this._sInstanceName = value;
            }
        }
        
        #endregion

        #region IAgRtStream Implementation

		public void Open()
		{
            if (this._Conn == null)
            {
                //Variables
                string MyConString = "SERVER=" + _Server + ";" +
                            "DATABASE=" + _sDatabase + ";" +
                            "UID=" + _UID + ";";

                _Conn = new MySqlConnection(MyConString);
                
                _Command = _Conn.CreateCommand();

                _Command.CommandText = "SELECT * FROM " + _sTable + " WHERE time >= ?min_time AND time <= ?max_time";
                _Command.Parameters.Add("?min_time",MySqlDbType.Double);
                _Command.Parameters.Add("?max_time", MySqlDbType.Double);
                //_Command.Parameters.Add("?table_name", MySqlDbType.VarChar);
                
                _Command.Parameters["?min_time"].Value = 0.00;
                _Command.Parameters["?max_time"].Value = 1.00;
                //_Command.Parameters["?table_name"].Value = "MessageTruthTargetStates";


                try
                {
                    _Conn.Open();
                }
                catch
                {
                    MessageBox.Show("Connection Open Error");
                }
			}
		}

		public void Close()
		{
			if (this._Conn != null)
			{
				this._Conn.Close();
				this._Conn = null;
                _Command = null;
            }
		}

        //Validate's job is to check our parameters to make sure we are configured
        //and can successfully process data.  It should use ThrowExceptionForHR
        //to return any errors in the configuration and simply return if
        //everything is okay.
        public void Validate()
        {
            //Variables
            string MyConString = "SERVER=" + _Server + ";" +
                        "DATABASE=" + _sDatabase + ";" +
                        "UID=" + _UID + ";";

            _Conn = new MySqlConnection(MyConString);

            try
            {
                _Conn.Open();
                _Conn.Close();
                _Conn = null;
            }
            catch (Exception ex)
            {
                MessageBox.Show("Database Connect Error: " + ex.Message + "|" + ex.Source);
                System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(unchecked((int)0x80004005)); //E_FAIL
            }                
        }

        public object Peek(int milliseconds)
        {
            float CurPos = System.Convert.ToSingle(_Command.Parameters["?min_time"].ToString());
            System.Collections.ArrayList result = new System.Collections.ArrayList();
            _Command.Parameters["?max_time"].Value = CurPos + milliseconds / 1000;
            String[] row = new String[5];

            MySqlDataReader Reader = _Command.ExecuteReader();

            while (Reader.Read())
            {
                row[0] = Reader.GetValue(2).ToString(); //time
                row[1] = Reader.GetValue(3).ToString(); //entity
                row[2] = Reader.GetValue(4).ToString(); //xAxis
                row[3] = Reader.GetValue(5).ToString(); //yAxis
                row[4] = Reader.GetValue(6).ToString(); //zAxis

                result.Add(row);
            }
            Reader.Close();

            return result.ToArray();
        }

        public object Read(int milliseconds)
        {

            float CurPos = System.Convert.ToSingle(_Command.Parameters["?min_time"].Value.ToString());

            System.Collections.ArrayList result = new System.Collections.ArrayList();
            _Command.Parameters["?max_time"].Value = CurPos + milliseconds / 1000;

            String row = "";

            try
            {
                //MessageBox.Show("Executing Reader");
                MySqlDataReader Reader = _Command.ExecuteReader();

                while (Reader.Read())
                {
                    row += Reader.GetValue(2).ToString(); //time
                    row += " " + _sTable + "_" + Reader.GetValue(3).ToString(); //entity
                    row += " " + Reader.GetValue(4).ToString(); //altitude
                    row += " " + Reader.GetValue(5).ToString();
                    row += " " + Reader.GetValue(6).ToString();
                    row += "\n";
                }

                
                Reader.Close();
            }
            catch (MySqlException ex)
            {
                MessageBox.Show(ex.Data + "|" + ex.ErrorCode + "|" + ex.Message);

            }

            _Command.Parameters["?min_time"].Value = System.Convert.ToDouble(_Command.Parameters["?max_time"].Value) + 0.000001;

            return row;
        }
        #endregion

        #region IAgAttrConfig Implementation

        public object GetConfig(AGI.Attr.AgAttrBuilder attrBuilder)
        {
            if(this._Options == null)
            {
                this._Options = attrBuilder.NewScope();

                //Expose Filename as an option
                /*attrBuilder.AddFileDispatchProperty(this._Options, 
                            "Filename2", 
                            "The full path of the file to read.", 
                            "Filename", 
                            "", 
                            "All Files (*.*)|*.*|",
                            (int) AGI.Attr.AgEAttrAddFlags.eAddFlagNone);*/

                attrBuilder.AddStringDispatchProperty(this._Options,
                            "Uuid",
                            "The name of the database containing the messages.",
                            "Database",
                            (int)AGI.Attr.AgEAttrAddFlags.eAddFlagNone);

                attrBuilder.AddStringDispatchProperty(this._Options,
                            "Table",
                            "The name of the Table containing the messages.",
                            "Table",
                            (int)AGI.Attr.AgEAttrAddFlags.eAddFlagNone);

            }
            return this._Options;
        }
        #endregion

        #region IISEStreamDatabase Implementation
        public string Database
        {
            get
            {
                return this._sDatabase;
            }
            set
            {
                this._sDatabase = value;
            }
        }

        public string Table
        {
            get
            {
                return this._sTable;
            }
            set
            {
                this._sTable = value;
            }
        }
        #endregion
	}
}

//=============================================================================
//=                 Copyright 2006, Analytical Graphics, Inc.                 =
//=============================================================================

